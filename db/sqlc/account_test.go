package db

import (
	"context"
	"database/sql"
	"github.com/stretchr/testify/require"
	"gitlab.com/AdamClaassens/simple_bank/util"
	"testing"
	"time"
)

// createRandomAccount creates a random account
func createRandomAccount(t *testing.T) Account {
	// create a random account
	arg := CreateAccountParams{
		Owner:    util.RandomOwner(),
		Balance:  util.RandomMoney(),
		Currency: util.RandomCurrency(),
	}

	// insert the random account into the database
	account, err := testQueries.CreateAccount(context.Background(), arg)
	// check for errors
	require.NoError(t, err)
	// check if the CreateAccount function returned is not empty
	require.NotEmpty(t, account)

	// check if the argument used for owner and the returned account owner are the same
	require.Equal(t, arg.Owner, account.Owner)
	// check if the argument used for balance and the returned account balance are the same
	require.Equal(t, arg.Balance, account.Balance)
	// check if the argument used for currency and the returned account currency are the same
	require.Equal(t, arg.Currency, account.Currency)

	// check if the returned account id and created_at are not zero
	require.NotZero(t, account.ID)
	// check if the returned account created_at is not zero
	require.NotZero(t, account.CreatedAt)

	// return the created account
	return account
}

// TestQueries_CreateAccount tests the CreateAccount function
func TestQueries_CreateAccount(t *testing.T) {
	// Create the arguments needed to create an account
	arg := CreateAccountParams{
		Owner:    util.RandomOwner(),
		Balance:  util.RandomMoney(),
		Currency: util.RandomCurrency(),
	}

	// Create the account with the above arguments
	account, err := testQueries.CreateAccount(context.Background(), arg)
	// check for errors
	require.NoError(t, err)
	// check if the CreateAccount function returned is not empty
	require.NotEmpty(t, account)

	// check if the argument used for owner and the returned account owner are the same
	require.Equal(t, arg.Owner, account.Owner)
	// check if the argument used for balance and the returned account balance are the same
	require.Equal(t, arg.Balance, account.Balance)
	// check if the argument used for currency and the returned account currency are the same
	require.Equal(t, arg.Currency, account.Currency)

	// check if the returned account id and created_at are not zero
	require.NotZero(t, account.ID)
	// check if the returned account created_at is not zero
	require.NotZero(t, account.CreatedAt)
}

// TestQueries_GetAccount tests the GetAccount function
func TestQueries_GetAccount(t *testing.T) {
	// create a random account
	account1 := createRandomAccount(t)
	// get the above account with GetAccount function generated by sqlc
	account2, err := testQueries.GetAccount(context.Background(), account1.ID)
	// check for errors
	require.NoError(t, err)
	// check if the GetAccount function returned is not empty
	require.NotEmpty(t, account2)

	// check if the created account and the returned account are the same
	require.Equal(t, account1.ID, account2.ID)
	// check if the created account and the returned account owner are the same
	require.Equal(t, account1.Owner, account2.Owner)
	// check if the created account and the returned account balance are the same
	require.Equal(t, account1.Balance, account2.Balance)
	// check if the created account and the returned account currency are the same
	require.Equal(t, account1.Currency, account2.Currency)
	// check if the created account and the returned account created_at are different by a second atl least
	require.WithinDuration(t, account1.CreatedAt, account2.CreatedAt, time.Second)
}

func TestQueries_UpdateAccount(t *testing.T) {
	// create a random account
	account1 := createRandomAccount(t)

	// Create arguments to update the account with
	arg := UpdateAccountParams{
		ID:      account1.ID,
		Balance: util.RandomMoney(),
	}

	// Update the account with the above arguments
	account2, err := testQueries.UpdateAccount(context.Background(), arg)
	// check for errors
	require.NoError(t, err)
	// check if the UpdateAccount function returned is not empty
	require.NotEmpty(t, account2)

	// check if the created account and the returned account are the same
	require.Equal(t, account1.ID, account2.ID)
	// check if the created account and the returned account owner are the same
	require.Equal(t, account1.Owner, account2.Owner)
	// check if the created account and the returned account balance are different
	require.NotEqual(t, account1.Balance, account2.Balance)
	// check if the created account and the returned account currency are the same
	require.Equal(t, account1.Currency, account2.Currency)
	// check if the created account and the returned account created_at are different by a second atl least
	require.Equal(t, account1.CreatedAt, account2.CreatedAt, time.Second)
}

func TestQueries_DeleteAccount(t *testing.T) {
	// create a random account
	account1 := createRandomAccount(t)

	// Delete the account
	err := testQueries.DeleteAccount(context.Background(), account1.ID)
	// check for errors
	require.NoError(t, err)

	// Get the deleted account
	account2, err := testQueries.GetAccount(context.Background(), account1.ID)
	// check that that it returns an error (it should)
	require.Error(t, err)
	// Check that the error the error returned corresponds to sql not finding any rows with this value
	require.EqualError(t, err, sql.ErrNoRows.Error())
	// check that the returned account is empty (Since it is deleted)
	require.Empty(t, account2)
}

func TestQueries_ListAccounts(t *testing.T) {
	// create 10 random accounts
	for i := 0; i < 10; i++ {
		createRandomAccount(t)
	}

	// Create arguments to list the accounts with (limit 5, offset 5)
	arg := ListAccountsParams{
		Limit:  5,
		Offset: 5,
	}

	// List the accounts with the above arguments
	accounts, err := testQueries.ListAccounts(context.Background(), arg)
	// check for errors
	require.NoError(t, err)
	// check if the ListAccounts function returned is not empty
	require.Len(t, accounts, 5)

	// Loop through the returned accounts
	for _, account := range accounts {
		// check if the returned account is not empty
		require.NotEmpty(t, account)
	}
}
